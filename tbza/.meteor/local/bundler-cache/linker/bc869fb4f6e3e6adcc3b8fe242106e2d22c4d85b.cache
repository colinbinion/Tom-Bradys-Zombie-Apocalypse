[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/client.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nrequire(\"./install-packages.js\");                                                                             // 1\nrequire(\"./stubs.js\");                                                                                        // 2\nrequire(\"./buffer.js\");                                                                                       // 3\nrequire(\"./process.js\");                                                                                      // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                      // 5\n                                                                                                              // 6\nexports.addStyles = require(\"./css\").addStyles;                                                               // 7\n                                                                                                              // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/buffer.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\ntry {                                                                                                         // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                         // 2\n} catch (noBuffer) {}                                                                                         // 3\n                                                                                                              // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/css.js                                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar doc = document;                                                                                           // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                          // 2\n                                                                                                              // 3\nexports.addStyles = function (css) {                                                                          // 4\n  var style = doc.createElement(\"style\");                                                                     // 5\n                                                                                                              // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                     // 7\n                                                                                                              // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                          // 9\n  var internetExplorerSheetObject =                                                                           // 10\n    style.sheet || // Edge/IE11.                                                                              // 11\n    style.styleSheet; // Older IEs.                                                                           // 12\n                                                                                                              // 13\n  if (internetExplorerSheetObject) {                                                                          // 14\n    internetExplorerSheetObject.cssText = css;                                                                // 15\n  } else {                                                                                                    // 16\n    style.appendChild(doc.createTextNode(css));                                                               // 17\n  }                                                                                                           // 18\n                                                                                                              // 19\n  return head.appendChild(style);                                                                             // 20\n};                                                                                                            // 21\n                                                                                                              // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/install-packages.js                                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nfunction install(name, mainModule) {                                                                          // 1\n  var meteorDir = {};                                                                                         // 2\n                                                                                                              // 3\n  // Given a package name <name>, install a stub module in the                                                // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                 // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                      // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                 // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                     // 8\n  // that the package contains a file called index.js (#6590).                                                // 9\n                                                                                                              // 10\n  if (mainModule) {                                                                                           // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                    // 12\n      module.exports = require(mainModule);                                                                   // 13\n    }];                                                                                                       // 14\n  } else {                                                                                                    // 15\n    // back compat with old Meteor packages                                                                   // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                       // 17\n      module.exports = Package[name];                                                                         // 18\n    };                                                                                                        // 19\n  }                                                                                                           // 20\n                                                                                                              // 21\n  meteorInstall({                                                                                             // 22\n    node_modules: {                                                                                           // 23\n      meteor: meteorDir                                                                                       // 24\n    }                                                                                                         // 25\n  });                                                                                                         // 26\n}                                                                                                             // 27\n                                                                                                              // 28\n// This file will be modified during computeJsOutputFilesMap to include                                       // 29\n// install(<name>) calls for every Meteor package.                                                            // 30\n                                                                                                              // 31\ninstall(\"underscore\");                                                                                        // 32\ninstall(\"meteor\");                                                                                            // 33\ninstall(\"meteor-base\");                                                                                       // 34\ninstall(\"mobile-experience\");                                                                                 // 35\ninstall(\"modules-runtime\");                                                                                   // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                               // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                             // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                               // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                        // 40\ninstall(\"babel-compiler\");                                                                                    // 41\ninstall(\"ecmascript\");                                                                                        // 42\ninstall(\"base64\");                                                                                            // 43\ninstall(\"ejson\");                                                                                             // 44\ninstall(\"id-map\");                                                                                            // 45\ninstall(\"ordered-dict\");                                                                                      // 46\ninstall(\"tracker\");                                                                                           // 47\ninstall(\"babel-runtime\", \"meteor/babel-runtime/babel-runtime.js\");                                            // 48\ninstall(\"random\");                                                                                            // 49\ninstall(\"mongo-id\");                                                                                          // 50\ninstall(\"diff-sequence\");                                                                                     // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                     // 52\ninstall(\"minimongo\");                                                                                         // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                    // 54\ninstall(\"retry\");                                                                                             // 55\ninstall(\"ddp-common\");                                                                                        // 56\ninstall(\"reload\");                                                                                            // 57\ninstall(\"ddp-client\");                                                                                        // 58\ninstall(\"ddp\");                                                                                               // 59\ninstall(\"ddp-server\");                                                                                        // 60\ninstall(\"allow-deny\");                                                                                        // 61\ninstall(\"insecure\");                                                                                          // 62\ninstall(\"mongo\");                                                                                             // 63\ninstall(\"blaze-html-templates\");                                                                              // 64\ninstall(\"reactive-var\");                                                                                      // 65\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                   // 66\ninstall(\"standard-minifier-css\");                                                                             // 67\ninstall(\"standard-minifier-js\");                                                                              // 68\ninstall(\"shell-server\");                                                                                      // 69\ninstall(\"autopublish\");                                                                                       // 70\ninstall(\"webapp\");                                                                                            // 71\ninstall(\"livedata\");                                                                                          // 72\ninstall(\"hot-code-push\");                                                                                     // 73\ninstall(\"observe-sequence\");                                                                                  // 74\ninstall(\"deps\");                                                                                              // 75\ninstall(\"htmljs\");                                                                                            // 76\ninstall(\"blaze\");                                                                                             // 77\ninstall(\"spacebars\");                                                                                         // 78\ninstall(\"templating-compiler\");                                                                               // 79\ninstall(\"templating-runtime\");                                                                                // 80\ninstall(\"templating\");                                                                                        // 81\ninstall(\"launch-screen\");                                                                                     // 82\ninstall(\"ui\");                                                                                                // 83\ninstall(\"autoupdate\");                                                                                        // 84\n                                                                                                              // 85\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/process.js                                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\ntry {                                                                                                         // 1\n  // The application can run `npm install process` to provide its own                                         // 2\n  // process stub; otherwise this module will provide a partial stub.                                         // 3\n  process = global.process || require(\"process\");                                                             // 4\n} catch (noProcess) {                                                                                         // 5\n  process = {};                                                                                               // 6\n}                                                                                                             // 7\n                                                                                                              // 8\nif (Meteor.isServer) {                                                                                        // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                      // 10\n  meteorInstall({                                                                                             // 11\n    node_modules: {                                                                                           // 12\n      \"process.js\": function (r, e, module) {                                                                 // 13\n        module.exports = process;                                                                             // 14\n      }                                                                                                       // 15\n    }                                                                                                         // 16\n  });                                                                                                         // 17\n} else {                                                                                                      // 18\n  process.platform = \"browser\";                                                                               // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                // 20\n}                                                                                                             // 21\n                                                                                                              // 22\nif (typeof process.env !== \"object\") {                                                                        // 23\n  process.env = {};                                                                                           // 24\n}                                                                                                             // 25\n                                                                                                              // 26\n_.extend(process.env, meteorEnv);                                                                             // 27\n                                                                                                              // 28\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/modules/stubs.js                                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\ntry {                                                                                                         // 1\n  // When meteor-node-stubs is installed in the application's root                                            // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                     // 3\n  // for all Node built-in modules, such as fs, util, and http.                                               // 4\n  require(\"meteor-node-stubs\");                                                                               // 5\n} catch (noStubs) {}                                                                                          // 6\n                                                                                                              // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar Entry = require(\"./entry.js\").Entry;                                                                      // 1\nvar utils = require(\"./utils.js\");                                                                            // 2\n                                                                                                              // 3\nexports.enable = function (Module) {                                                                          // 4\n  var Mp = Module.prototype;                                                                                  // 5\n                                                                                                              // 6\n  if (typeof Mp.import === \"function\" &&                                                                      // 7\n      typeof Mp.export === \"function\") {                                                                      // 8\n    // If the Mp.{import,export} methods have already been                                                    // 9\n    // defined, abandon reification immediately.                                                              // 10\n    return Module;                                                                                            // 11\n  }                                                                                                           // 12\n                                                                                                              // 13\n  // Platform-specific code should implement this method however                                              // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                      // 15\n  // version of the given module identifier, like require.resolve.                                            // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                           // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                              // 18\n  };                                                                                                          // 19\n                                                                                                              // 20\n  // Platform-specific code should find a way to call this method whenever                                    // 21\n  // the module system is about to return module.exports from require. This                                   // 22\n  // might happen more than once per module, in case of dependency cycles,                                    // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                           // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                       // 25\n    var entry = Entry.get(this.id);                                                                           // 26\n    if (entry) {                                                                                              // 27\n      entry.runModuleSetters(this);                                                                           // 28\n    }                                                                                                         // 29\n                                                                                                              // 30\n    // Assignments to exported local variables get wrapped with calls to                                      // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                        // 32\n    // valueToPassThrough parameter to allow the value of the original                                        // 33\n    // expression to pass through. For example,                                                               // 34\n    //                                                                                                        // 35\n    //   export var a = 1;                                                                                    // 36\n    //   console.log(a += 3);                                                                                 // 37\n    //                                                                                                        // 38\n    // becomes                                                                                                // 39\n    //                                                                                                        // 40\n    //   module.export(\"a\", () => a);                                                                         // 41\n    //   var a = 1;                                                                                           // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                        // 43\n    //                                                                                                        // 44\n    // This ensures module.runModuleSetters runs immediately after the                                        // 45\n    // assignment, and does not interfere with the larger computation.                                        // 46\n    return valueToPassThrough;                                                                                // 47\n  };                                                                                                          // 48\n                                                                                                              // 49\n  function setESModule(module) {                                                                              // 50\n    var exports = module.exports;                                                                             // 51\n    if (exports && typeof exports === \"object\") {                                                             // 52\n      exports.__esModule = true;                                                                              // 53\n    }                                                                                                         // 54\n  }                                                                                                           // 55\n                                                                                                              // 56\n  Mp.import = function (id, setters) {                                                                        // 57\n    var module = this;                                                                                        // 58\n    setESModule(module);                                                                                      // 59\n                                                                                                              // 60\n    var absoluteId = module.resolve(id);                                                                      // 61\n                                                                                                              // 62\n    if (setters && typeof setters === \"object\") {                                                             // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                              // 64\n      entry.addSetters(module, setters);                                                                      // 65\n    }                                                                                                         // 66\n                                                                                                              // 67\n    var countBefore = entry && entry.runCount;                                                                // 68\n    var exports = typeof module.require === \"function\"                                                        // 69\n      ? module.require(absoluteId)                                                                            // 70\n      : require(absoluteId);                                                                                  // 71\n                                                                                                              // 72\n    if (entry && entry.runCount === countBefore) {                                                            // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                        // 74\n      // perhaps because it's not the first time this module has been                                         // 75\n      // required, run the setters now using an object that passes as the                                     // 76\n      // real module object.                                                                                  // 77\n      entry.runModuleSetters({                                                                                // 78\n        id: absoluteId,                                                                                       // 79\n        exports: exports,                                                                                     // 80\n        getExportByName: Mp.getExportByName                                                                   // 81\n      });                                                                                                     // 82\n    }                                                                                                         // 83\n  };                                                                                                          // 84\n                                                                                                              // 85\n  // Register getter functions for local variables in the scope of an                                         // 86\n  // export statement. The keys of the getters object are exported names,                                     // 87\n  // and the values are functions that return local values.                                                   // 88\n  Mp.export = function (getters) {                                                                            // 89\n    var module = this;                                                                                        // 90\n    setESModule(module);                                                                                      // 91\n                                                                                                              // 92\n    if (utils.isPlainObject(getters)) {                                                                       // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                       // 94\n    }                                                                                                         // 95\n                                                                                                              // 96\n    if (module.loaded) {                                                                                      // 97\n      // If the module has already been evaluated, then we need to trigger                                    // 98\n      // another round of entry.runModuleSetters calls, which begins by                                       // 99\n      // calling entry.runModuleGetters(module).                                                              // 100\n      module.runModuleSetters();                                                                              // 101\n    }                                                                                                         // 102\n  };                                                                                                          // 103\n                                                                                                              // 104\n  // This method can be overridden by client code to implement custom export                                  // 105\n  // naming logic. The current implementation works well with Babel's                                         // 106\n  // __esModule convention.                                                                                   // 107\n  Mp.getExportByName = function (name) {                                                                      // 108\n    var exports = this.exports;                                                                               // 109\n                                                                                                              // 110\n    if (name === \"*\") {                                                                                       // 111\n      return exports;                                                                                         // 112\n    }                                                                                                         // 113\n                                                                                                              // 114\n    if (name === \"default\" &&                                                                                 // 115\n        ! (exports &&                                                                                         // 116\n           typeof exports === \"object\" &&                                                                     // 117\n           exports.__esModule &&                                                                              // 118\n           \"default\" in exports)) {                                                                           // 119\n      return exports;                                                                                         // 120\n    }                                                                                                         // 121\n                                                                                                              // 122\n    return exports && exports[name];                                                                          // 123\n  };                                                                                                          // 124\n                                                                                                              // 125\n  return Module;                                                                                              // 126\n};                                                                                                            // 127\n                                                                                                              // 128\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                 // 1\nvar entryMap = Object.create(null);                                                                           // 2\nvar utils = require(\"./utils.js\");                                                                            // 3\n                                                                                                              // 4\nfunction Entry(id) {                                                                                          // 5\n  // Same as module.id for this module.                                                                       // 6\n  this.id = id;                                                                                               // 7\n  // The number of times this.runModuleSetters has been called.                                               // 8\n  this.runCount = 0;                                                                                          // 9\n  // Setters for assigning to local variables in parent modules.                                              // 10\n  this.setters = Object.create(null);                                                                         // 11\n  // Getters for local variables exported from this module.                                                   // 12\n  this.getters = Object.create(null);                                                                         // 13\n}                                                                                                             // 14\n                                                                                                              // 15\nvar Ep = Entry.prototype;                                                                                     // 16\n                                                                                                              // 17\nEntry.get = function (id) {                                                                                   // 18\n  return entryMap[id] || null;                                                                                // 19\n};                                                                                                            // 20\n                                                                                                              // 21\nEntry.getOrCreate = function (id) {                                                                           // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                        // 23\n};                                                                                                            // 24\n                                                                                                              // 25\nEp.addSetters = function (parent, setters) {                                                                  // 26\n  var entry = this;                                                                                           // 27\n                                                                                                              // 28\n  Object.keys(setters).forEach(function (name) {                                                              // 29\n    var setter = setters[name];                                                                               // 30\n    if (typeof setter === \"function\" &&                                                                       // 31\n        // Ignore any requests for the exports.__esModule property.\"                                          // 32\n        name !== \"__esModule\") {                                                                              // 33\n      setter.parent = parent;                                                                                 // 34\n      (entry.setters[name] =                                                                                  // 35\n       entry.setters[name] || []                                                                              // 36\n      ).push(setter);                                                                                         // 37\n    }                                                                                                         // 38\n  });                                                                                                         // 39\n};                                                                                                            // 40\n                                                                                                              // 41\nEp.addGetters = function (getters) {                                                                          // 42\n  var entry = this;                                                                                           // 43\n  Object.keys(getters).forEach(function (name) {                                                              // 44\n    var getter = getters[name];                                                                               // 45\n    if (typeof getter === \"function\" &&                                                                       // 46\n        // Ignore any requests for the exports.__esModule property.\"                                          // 47\n        name !== \"__esModule\") {                                                                              // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                                // 49\n      entry.getters[name] = getter;                                                                           // 50\n    }                                                                                                         // 51\n  });                                                                                                         // 52\n};                                                                                                            // 53\n                                                                                                              // 54\nfunction runModuleSetters(module) {                                                                           // 55\n  var entry = entryMap[module.id];                                                                            // 56\n  if (entry) {                                                                                                // 57\n    entry.runModuleSetters(module);                                                                           // 58\n  }                                                                                                           // 59\n}                                                                                                             // 60\n                                                                                                              // 61\nfunction runModuleGetters(module) {                                                                           // 62\n  var entry = entryMap[module.id];                                                                            // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                          // 64\n}                                                                                                             // 65\n                                                                                                              // 66\nEp.runModuleGetters = function (module) {                                                                     // 67\n  var entry = this;                                                                                           // 68\n  var changeCount = 0;                                                                                        // 69\n                                                                                                              // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                        // 71\n    if (entry.runGetter(module, name)) {                                                                      // 72\n      ++changeCount;                                                                                          // 73\n    }                                                                                                         // 74\n  });                                                                                                         // 75\n                                                                                                              // 76\n  return changeCount;                                                                                         // 77\n};                                                                                                            // 78\n                                                                                                              // 79\n// Returns true iff the getter updated module.exports with a new value.                                       // 80\nEp.runGetter = function (module, name) {                                                                      // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                    // 82\n    return false;                                                                                             // 83\n  }                                                                                                           // 84\n                                                                                                              // 85\n  var getter = this.getters[name];                                                                            // 86\n  try {                                                                                                       // 87\n    var value = getter.call(module);                                                                          // 88\n  } catch (e) {}                                                                                              // 89\n  var exports = module.exports;                                                                               // 90\n                                                                                                              // 91\n  if (! hasOwn.call(exports, name) ||                                                                         // 92\n      exports[name] !== value) {                                                                              // 93\n    // We update module.exports[name] with the current value so that                                          // 94\n    // CommonJS require calls remain consistent with module.import.                                           // 95\n    exports[name] = value;                                                                                    // 96\n    return true;                                                                                              // 97\n  }                                                                                                           // 98\n                                                                                                              // 99\n  return false;                                                                                               // 100\n};                                                                                                            // 101\n                                                                                                              // 102\n// Called whenever module.exports might have changed, to trigger any                                          // 103\n// setters associated with the newly exported values.                                                         // 104\nEp.runModuleSetters = function (module) {                                                                     // 105\n  var entry = this;                                                                                           // 106\n  var names = Object.keys(entry.setters);                                                                     // 107\n                                                                                                              // 108\n  // Make sure module.exports is up to date before we call                                                    // 109\n  // module.getExportByName(name).                                                                            // 110\n  entry.runModuleGetters(module);                                                                             // 111\n                                                                                                              // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                    // 113\n  // that needs to be called. Note that forEachSetter does not call any                                       // 114\n  // setters itself, only the given callback.                                                                 // 115\n  function forEachSetter(callback, context) {                                                                 // 116\n    names.forEach(function (name) {                                                                           // 117\n      entry.setters[name].forEach(function (setter) {                                                         // 118\n        var value = module.getExportByName(name);                                                             // 119\n        if (name === \"*\") {                                                                                   // 120\n          Object.keys(value).forEach(function (name) {                                                        // 121\n            call(setter, value[name], name);                                                                  // 122\n          });                                                                                                 // 123\n        } else {                                                                                              // 124\n          call(setter, value, name);                                                                          // 125\n        }                                                                                                     // 126\n      });                                                                                                     // 127\n    });                                                                                                       // 128\n                                                                                                              // 129\n    function call(setter, value, name) {                                                                      // 130\n      if (name === \"__esModule\") {                                                                            // 131\n        // Ignore setters asking for module.exports.__esModule.                                               // 132\n        return;                                                                                               // 133\n      }                                                                                                       // 134\n                                                                                                              // 135\n      setter.last = setter.last || Object.create(null);                                                       // 136\n                                                                                                              // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                 // 138\n          setter.last[name] !== value) {                                                                      // 139\n        // Only invoke the callback if we have not called this setter                                         // 140\n        // (with a value of this name) before, or the current value is                                        // 141\n        // different from the last value we passed to this setter.                                            // 142\n        return callback.apply(context, arguments);                                                            // 143\n      }                                                                                                       // 144\n    }                                                                                                         // 145\n  }                                                                                                           // 146\n                                                                                                              // 147\n  // Every three elements of this list form a (setter, value, name) triple                                    // 148\n  // that needs to be invoked.                                                                                // 149\n  var settersToCall = [];                                                                                     // 150\n                                                                                                              // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                          // 152\n  // relevant parent module objects and snapshots of their exports.                                           // 153\n  var relevantParents;                                                                                        // 154\n  var parentSnapshots;                                                                                        // 155\n                                                                                                              // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                      // 157\n  // planning to call, so that we can later determine if calling the                                          // 158\n  // setters modified any of those exports objects.                                                           // 159\n  forEachSetter(function (setter, value, name) {                                                              // 160\n    var parent = setter.parent;                                                                               // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                 // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                          // 163\n      relevantParents = relevantParents || Object.create(null);                                               // 164\n      relevantParents[parent.id] = parent;                                                                    // 165\n      if (utils.isPlainObject(parent.exports)) {                                                              // 166\n        // If parent.exports is an object, make a shallow clone of it so                                      // 167\n        // that we can see if it changes as a result of calling setters.                                      // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                        // 169\n      } else {                                                                                                // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                     // 171\n        // value of parent.exports.                                                                           // 172\n        parentSnapshots[parent.id] = parent.exports;                                                          // 173\n      }                                                                                                       // 174\n    }                                                                                                         // 175\n                                                                                                              // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                     // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                              // 178\n    settersToCall.push(setter, value, name);                                                                  // 179\n  });                                                                                                         // 180\n                                                                                                              // 181\n  // Now call all the setters that we decided we need to call.                                                // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                         // 183\n    var setter = settersToCall[i];                                                                            // 184\n    var value = settersToCall[i + 1];                                                                         // 185\n    var name = settersToCall[i + 2];                                                                          // 186\n    setter.call(module, setter.last[name] = value, name);                                                     // 187\n  }                                                                                                           // 188\n                                                                                                              // 189\n  ++entry.runCount;                                                                                           // 190\n                                                                                                              // 191\n  if (! relevantParents) {                                                                                    // 192\n    // If we never called takeSnapshot, then we can avoid checking                                            // 193\n    // relevantParents and parentSnapshots below.                                                             // 194\n    return;                                                                                                   // 195\n  }                                                                                                           // 196\n                                                                                                              // 197\n  // If any of the setters updated the module.exports of a parent module,                                     // 198\n  // or updated local variables that are exported by that parent module,                                      // 199\n  // then we must re-run any setters registered by that parent module.                                        // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                        // 201\n    var parent = relevantParents[id];                                                                         // 202\n                                                                                                              // 203\n    if (runModuleGetters(parent) > 0) {                                                                       // 204\n      return runModuleSetters(parent);                                                                        // 205\n    }                                                                                                         // 206\n                                                                                                              // 207\n    var exports = parent.exports;                                                                             // 208\n    var snapshot = parentSnapshots[parent.id];                                                                // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                           // 210\n      // If parent.exports have not changed since we took the snapshot,                                       // 211\n      // then we do not need to run the parent's setters.                                                     // 212\n      return;                                                                                                 // 213\n    }                                                                                                         // 214\n                                                                                                              // 215\n    runModuleSetters(parent);                                                                                 // 216\n  });                                                                                                         // 217\n};                                                                                                            // 218\n                                                                                                              // 219\nexports.Entry = Entry;                                                                                        // 220\n                                                                                                              // 221\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                 // 1\nvar objToStr = Object.prototype.toString;                                                                     // 2\nvar objStr = objToStr.call({});                                                                               // 3\n                                                                                                              // 4\nfunction isPlainObject(value) {                                                                               // 5\n  return objToStr.call(value) === objStr;                                                                     // 6\n}                                                                                                             // 7\nexports.isPlainObject = isPlainObject;                                                                        // 8\n                                                                                                              // 9\nexports.assign = Object.assign || function (obj) {                                                            // 10\n  var argc = arguments.length;                                                                                // 11\n  for (var i = 1; i < argc; ++i) {                                                                            // 12\n    var arg = arguments[i];                                                                                   // 13\n    if (arg && typeof arg === \"object\") {                                                                     // 14\n      var keys = Object.keys(arg);                                                                            // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                 // 16\n        var key = keys[k];                                                                                    // 17\n        obj[key] = arg[key];                                                                                  // 18\n      }                                                                                                       // 19\n    }                                                                                                         // 20\n  }                                                                                                           // 21\n  return obj;                                                                                                 // 22\n};                                                                                                            // 23\n                                                                                                              // 24\nexports.shallowObjEqual = function(a, b) {                                                                    // 25\n  if (a === b) {                                                                                              // 26\n    return true;                                                                                              // 27\n  }                                                                                                           // 28\n                                                                                                              // 29\n  if (! isPlainObject(a) ||                                                                                   // 30\n      ! isPlainObject(b)) {                                                                                   // 31\n    return false;                                                                                             // 32\n  }                                                                                                           // 33\n                                                                                                              // 34\n  var aKeys = Object.keys(a);                                                                                 // 35\n  var bKeys = Object.keys(b);                                                                                 // 36\n                                                                                                              // 37\n  if (aKeys.length !== bKeys.length) {                                                                        // 38\n    return false;                                                                                             // 39\n  }                                                                                                           // 40\n                                                                                                              // 41\n  return aKeys.every(function (key) {                                                                         // 42\n    return hasOwn.call(b, key) &&                                                                             // 43\n      a[key] === b[key];                                                                                      // 44\n  });                                                                                                         // 45\n};                                                                                                            // 46\n                                                                                                              // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"babel-runtime\":{\"regenerator\":{\"index.js\":[\"regenerator-runtime\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/babel-runtime/regenerator/index.js                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nmodule.exports = require(\"regenerator-runtime\");                                                              // 1\n                                                                                                              // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"regenerator-runtime\":{\"package.json\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/regenerator-runtime/package.json                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nexports.name = \"regenerator-runtime\";                                                                         // 1\nexports.version = \"0.9.6\";                                                                                    // 2\nexports.main = \"runtime-module.js\";                                                                           // 3\n                                                                                                              // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runtime-module.js\":[\"./runtime\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/regenerator-runtime/runtime-module.js                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// This method of obtaining a reference to the global object needs to be                                      // 1\n// kept identical to the way it is obtained in runtime.js                                                     // 2\nvar g =                                                                                                       // 3\n  typeof global === \"object\" ? global :                                                                       // 4\n  typeof window === \"object\" ? window :                                                                       // 5\n  typeof self === \"object\" ? self : this;                                                                     // 6\n                                                                                                              // 7\n// Use `getOwnPropertyNames` because not all browsers support calling                                         // 8\n// `hasOwnProperty` on the global `self` object in a worker. See #183.                                        // 9\nvar hadRuntime = g.regeneratorRuntime &&                                                                      // 10\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;                                           // 11\n                                                                                                              // 12\n// Save the old regeneratorRuntime in case it needs to be restored later.                                     // 13\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;                                                          // 14\n                                                                                                              // 15\n// Force reevalutation of runtime.js.                                                                         // 16\ng.regeneratorRuntime = undefined;                                                                             // 17\n                                                                                                              // 18\nmodule.exports = require(\"./runtime\");                                                                        // 19\n                                                                                                              // 20\nif (hadRuntime) {                                                                                             // 21\n  // Restore the original runtime.                                                                            // 22\n  g.regeneratorRuntime = oldRuntime;                                                                          // 23\n} else {                                                                                                      // 24\n  // Remove the global property added by runtime.js.                                                          // 25\n  try {                                                                                                       // 26\n    delete g.regeneratorRuntime;                                                                              // 27\n  } catch(e) {                                                                                                // 28\n    g.regeneratorRuntime = undefined;                                                                         // 29\n  }                                                                                                           // 30\n}                                                                                                             // 31\n                                                                                                              // 32\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"runtime.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// node_modules/regenerator-runtime/runtime.js                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * Copyright (c) 2014, Facebook, Inc.                                                                         // 2\n * All rights reserved.                                                                                       // 3\n *                                                                                                            // 4\n * This source code is licensed under the BSD-style license found in the                                      // 5\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                        // 6\n * additional grant of patent rights can be found in the PATENTS file in                                      // 7\n * the same directory.                                                                                        // 8\n */                                                                                                           // 9\n                                                                                                              // 10\n!(function(global) {                                                                                          // 11\n  \"use strict\";                                                                                               // 12\n                                                                                                              // 13\n  var hasOwn = Object.prototype.hasOwnProperty;                                                               // 14\n  var undefined; // More compressible than void 0.                                                            // 15\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};                                                   // 16\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";                                                      // 17\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";                                             // 18\n                                                                                                              // 19\n  var inModule = typeof module === \"object\";                                                                  // 20\n  var runtime = global.regeneratorRuntime;                                                                    // 21\n  if (runtime) {                                                                                              // 22\n    if (inModule) {                                                                                           // 23\n      // If regeneratorRuntime is defined globally and we're in a module,                                     // 24\n      // make the exports object identical to regeneratorRuntime.                                             // 25\n      module.exports = runtime;                                                                               // 26\n    }                                                                                                         // 27\n    // Don't bother evaluating the rest of this file if the runtime was                                       // 28\n    // already defined globally.                                                                              // 29\n    return;                                                                                                   // 30\n  }                                                                                                           // 31\n                                                                                                              // 32\n  // Define the runtime globally (as expected by generated code) as either                                    // 33\n  // module.exports (if we're in a module) or a new, empty object.                                            // 34\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                       // 35\n                                                                                                              // 36\n  function wrap(innerFn, outerFn, self, tryLocsList) {                                                        // 37\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;             // 39\n    var generator = Object.create(protoGenerator.prototype);                                                  // 40\n    var context = new Context(tryLocsList || []);                                                             // 41\n                                                                                                              // 42\n    // The ._invoke method unifies the implementations of the .next,                                          // 43\n    // .throw, and .return methods.                                                                           // 44\n    generator._invoke = makeInvokeMethod(innerFn, self, context);                                             // 45\n                                                                                                              // 46\n    return generator;                                                                                         // 47\n  }                                                                                                           // 48\n  runtime.wrap = wrap;                                                                                        // 49\n                                                                                                              // 50\n  // Try/catch helper to minimize deoptimizations. Returns a completion                                       // 51\n  // record like context.tryEntries[i].completion. This interface could                                       // 52\n  // have been (and was previously) designed to take a closure to be                                          // 53\n  // invoked without arguments, but in all the cases we care about we                                         // 54\n  // already have an existing method we want to call, so there's no need                                      // 55\n  // to create a new function object. We can even get away with assuming                                      // 56\n  // the method takes exactly one argument, since that happens to be true                                     // 57\n  // in every case, so we don't have to touch the arguments object. The                                       // 58\n  // only additional allocation required is the completion record, which                                      // 59\n  // has a stable shape and so hopefully should be cheap to allocate.                                         // 60\n  function tryCatch(fn, obj, arg) {                                                                           // 61\n    try {                                                                                                     // 62\n      return { type: \"normal\", arg: fn.call(obj, arg) };                                                      // 63\n    } catch (err) {                                                                                           // 64\n      return { type: \"throw\", arg: err };                                                                     // 65\n    }                                                                                                         // 66\n  }                                                                                                           // 67\n                                                                                                              // 68\n  var GenStateSuspendedStart = \"suspendedStart\";                                                              // 69\n  var GenStateSuspendedYield = \"suspendedYield\";                                                              // 70\n  var GenStateExecuting = \"executing\";                                                                        // 71\n  var GenStateCompleted = \"completed\";                                                                        // 72\n                                                                                                              // 73\n  // Returning this object from the innerFn has the same effect as                                            // 74\n  // breaking out of the dispatch switch statement.                                                           // 75\n  var ContinueSentinel = {};                                                                                  // 76\n                                                                                                              // 77\n  // Dummy constructor functions that we use as the .constructor and                                          // 78\n  // .constructor.prototype properties for functions that return Generator                                    // 79\n  // objects. For full spec compliance, you may wish to configure your                                        // 80\n  // minifier not to mangle the names of these two functions.                                                 // 81\n  function Generator() {}                                                                                     // 82\n  function GeneratorFunction() {}                                                                             // 83\n  function GeneratorFunctionPrototype() {}                                                                    // 84\n                                                                                                              // 85\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;                                        // 86\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                  // 87\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                 // 88\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";        // 89\n                                                                                                              // 90\n  // Helper for defining the .next, .throw, and .return methods of the                                        // 91\n  // Iterator interface in terms of a single ._invoke method.                                                 // 92\n  function defineIteratorMethods(prototype) {                                                                 // 93\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {                                                    // 94\n      prototype[method] = function(arg) {                                                                     // 95\n        return this._invoke(method, arg);                                                                     // 96\n      };                                                                                                      // 97\n    });                                                                                                       // 98\n  }                                                                                                           // 99\n                                                                                                              // 100\n  runtime.isGeneratorFunction = function(genFun) {                                                            // 101\n    var ctor = typeof genFun === \"function\" && genFun.constructor;                                            // 102\n    return ctor                                                                                               // 103\n      ? ctor === GeneratorFunction ||                                                                         // 104\n        // For the native GeneratorFunction constructor, the best we can                                      // 105\n        // do is to check its .name property.                                                                 // 106\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"                                               // 107\n      : false;                                                                                                // 108\n  };                                                                                                          // 109\n                                                                                                              // 110\n  runtime.mark = function(genFun) {                                                                           // 111\n    if (Object.setPrototypeOf) {                                                                              // 112\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                              // 113\n    } else {                                                                                                  // 114\n      genFun.__proto__ = GeneratorFunctionPrototype;                                                          // 115\n      if (!(toStringTagSymbol in genFun)) {                                                                   // 116\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";                                                      // 117\n      }                                                                                                       // 118\n    }                                                                                                         // 119\n    genFun.prototype = Object.create(Gp);                                                                     // 120\n    return genFun;                                                                                            // 121\n  };                                                                                                          // 122\n                                                                                                              // 123\n  // Within the body of any async function, `await x` is transformed to                                       // 124\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                        // 125\n  // `value instanceof AwaitArgument` to determine if the yielded value is                                    // 126\n  // meant to be awaited. Some may consider the name of this method too                                       // 127\n  // cutesy, but they are curmudgeons.                                                                        // 128\n  runtime.awrap = function(arg) {                                                                             // 129\n    return new AwaitArgument(arg);                                                                            // 130\n  };                                                                                                          // 131\n                                                                                                              // 132\n  function AwaitArgument(arg) {                                                                               // 133\n    this.arg = arg;                                                                                           // 134\n  }                                                                                                           // 135\n                                                                                                              // 136\n  function AsyncIterator(generator) {                                                                         // 137\n    function invoke(method, arg, resolve, reject) {                                                           // 138\n      var record = tryCatch(generator[method], generator, arg);                                               // 139\n      if (record.type === \"throw\") {                                                                          // 140\n        reject(record.arg);                                                                                   // 141\n      } else {                                                                                                // 142\n        var result = record.arg;                                                                              // 143\n        var value = result.value;                                                                             // 144\n        if (value instanceof AwaitArgument) {                                                                 // 145\n          return Promise.resolve(value.arg).then(function(value) {                                            // 146\n            invoke(\"next\", value, resolve, reject);                                                           // 147\n          }, function(err) {                                                                                  // 148\n            invoke(\"throw\", err, resolve, reject);                                                            // 149\n          });                                                                                                 // 150\n        }                                                                                                     // 151\n                                                                                                              // 152\n        return Promise.resolve(value).then(function(unwrapped) {                                              // 153\n          // When a yielded Promise is resolved, its final value becomes                                      // 154\n          // the .value of the Promise<{value,done}> result for the                                           // 155\n          // current iteration. If the Promise is rejected, however, the                                      // 156\n          // result for this iteration will be rejected with the same                                         // 157\n          // reason. Note that rejections of yielded Promises are not                                         // 158\n          // thrown back into the generator function, as is the case                                          // 159\n          // when an awaited Promise is rejected. This difference in                                          // 160\n          // behavior between yield and await is important, because it                                        // 161\n          // allows the consumer to decide what to do with the yielded                                        // 162\n          // rejection (swallow it and continue, manually .throw it back                                      // 163\n          // into the generator, abandon iteration, whatever). With                                           // 164\n          // await, by contrast, there is no opportunity to examine the                                       // 165\n          // rejection reason outside the generator function, so the                                          // 166\n          // only option is to throw it from the await expression, and                                        // 167\n          // let the generator function handle the exception.                                                 // 168\n          result.value = unwrapped;                                                                           // 169\n          resolve(result);                                                                                    // 170\n        }, reject);                                                                                           // 171\n      }                                                                                                       // 172\n    }                                                                                                         // 173\n                                                                                                              // 174\n    if (typeof process === \"object\" && process.domain) {                                                      // 175\n      invoke = process.domain.bind(invoke);                                                                   // 176\n    }                                                                                                         // 177\n                                                                                                              // 178\n    var previousPromise;                                                                                      // 179\n                                                                                                              // 180\n    function enqueue(method, arg) {                                                                           // 181\n      function callInvokeWithMethodAndArg() {                                                                 // 182\n        return new Promise(function(resolve, reject) {                                                        // 183\n          invoke(method, arg, resolve, reject);                                                               // 184\n        });                                                                                                   // 185\n      }                                                                                                       // 186\n                                                                                                              // 187\n      return previousPromise =                                                                                // 188\n        // If enqueue has been called before, then we want to wait until                                      // 189\n        // all previous Promises have been resolved before calling invoke,                                    // 190\n        // so that results are always delivered in the correct order. If                                      // 191\n        // enqueue has not been called before, then it is important to                                        // 192\n        // call invoke immediately, without waiting on a callback to fire,                                    // 193\n        // so that the async generator function has the opportunity to do                                     // 194\n        // any necessary setup in a predictable way. This predictability                                      // 195\n        // is why the Promise constructor synchronously invokes its                                           // 196\n        // executor callback, and why async functions synchronously                                           // 197\n        // execute code before the first await. Since we implement simple                                     // 198\n        // async functions in terms of async generators, it is especially                                     // 199\n        // important to get this right, even though it requires care.                                         // 200\n        previousPromise ? previousPromise.then(                                                               // 201\n          callInvokeWithMethodAndArg,                                                                         // 202\n          // Avoid propagating failures to Promises returned by later                                         // 203\n          // invocations of the iterator.                                                                     // 204\n          callInvokeWithMethodAndArg                                                                          // 205\n        ) : callInvokeWithMethodAndArg();                                                                     // 206\n    }                                                                                                         // 207\n                                                                                                              // 208\n    // Define the unified helper method that is used to implement .next,                                      // 209\n    // .throw, and .return (see defineIteratorMethods).                                                       // 210\n    this._invoke = enqueue;                                                                                   // 211\n  }                                                                                                           // 212\n                                                                                                              // 213\n  defineIteratorMethods(AsyncIterator.prototype);                                                             // 214\n                                                                                                              // 215\n  // Note that simple async functions are implemented on top of                                               // 216\n  // AsyncIterator objects; they just return a Promise for the value of                                       // 217\n  // the final result produced by the iterator.                                                               // 218\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                             // 219\n    var iter = new AsyncIterator(                                                                             // 220\n      wrap(innerFn, outerFn, self, tryLocsList)                                                               // 221\n    );                                                                                                        // 222\n                                                                                                              // 223\n    return runtime.isGeneratorFunction(outerFn)                                                               // 224\n      ? iter // If outerFn is a generator, return the full iterator.                                          // 225\n      : iter.next().then(function(result) {                                                                   // 226\n          return result.done ? result.value : iter.next();                                                    // 227\n        });                                                                                                   // 228\n  };                                                                                                          // 229\n                                                                                                              // 230\n  function makeInvokeMethod(innerFn, self, context) {                                                         // 231\n    var state = GenStateSuspendedStart;                                                                       // 232\n                                                                                                              // 233\n    return function invoke(method, arg) {                                                                     // 234\n      if (state === GenStateExecuting) {                                                                      // 235\n        throw new Error(\"Generator is already running\");                                                      // 236\n      }                                                                                                       // 237\n                                                                                                              // 238\n      if (state === GenStateCompleted) {                                                                      // 239\n        if (method === \"throw\") {                                                                             // 240\n          throw arg;                                                                                          // 241\n        }                                                                                                     // 242\n                                                                                                              // 243\n        // Be forgiving, per 25.3.3.3.3 of the spec:                                                          // 244\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                          // 245\n        return doneResult();                                                                                  // 246\n      }                                                                                                       // 247\n                                                                                                              // 248\n      while (true) {                                                                                          // 249\n        var delegate = context.delegate;                                                                      // 250\n        if (delegate) {                                                                                       // 251\n          if (method === \"return\" ||                                                                          // 252\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {                              // 253\n            // A return or throw (when the delegate iterator has no throw                                     // 254\n            // method) always terminates the yield* loop.                                                     // 255\n            context.delegate = null;                                                                          // 256\n                                                                                                              // 257\n            // If the delegate iterator has a return method, give it a                                        // 258\n            // chance to clean up.                                                                            // 259\n            var returnMethod = delegate.iterator[\"return\"];                                                   // 260\n            if (returnMethod) {                                                                               // 261\n              var record = tryCatch(returnMethod, delegate.iterator, arg);                                    // 262\n              if (record.type === \"throw\") {                                                                  // 263\n                // If the return method threw an exception, let that                                          // 264\n                // exception prevail over the original return or throw.                                       // 265\n                method = \"throw\";                                                                             // 266\n                arg = record.arg;                                                                             // 267\n                continue;                                                                                     // 268\n              }                                                                                               // 269\n            }                                                                                                 // 270\n                                                                                                              // 271\n            if (method === \"return\") {                                                                        // 272\n              // Continue with the outer return, now that the delegate                                        // 273\n              // iterator has been terminated.                                                                // 274\n              continue;                                                                                       // 275\n            }                                                                                                 // 276\n          }                                                                                                   // 277\n                                                                                                              // 278\n          var record = tryCatch(                                                                              // 279\n            delegate.iterator[method],                                                                        // 280\n            delegate.iterator,                                                                                // 281\n            arg                                                                                               // 282\n          );                                                                                                  // 283\n                                                                                                              // 284\n          if (record.type === \"throw\") {                                                                      // 285\n            context.delegate = null;                                                                          // 286\n                                                                                                              // 287\n            // Like returning generator.throw(uncaught), but without the                                      // 288\n            // overhead of an extra function call.                                                            // 289\n            method = \"throw\";                                                                                 // 290\n            arg = record.arg;                                                                                 // 291\n            continue;                                                                                         // 292\n          }                                                                                                   // 293\n                                                                                                              // 294\n          // Delegate generator ran and handled its own exceptions so                                         // 295\n          // regardless of what the method was, we continue as if it is                                       // 296\n          // \"next\" with an undefined arg.                                                                    // 297\n          method = \"next\";                                                                                    // 298\n          arg = undefined;                                                                                    // 299\n                                                                                                              // 300\n          var info = record.arg;                                                                              // 301\n          if (info.done) {                                                                                    // 302\n            context[delegate.resultName] = info.value;                                                        // 303\n            context.next = delegate.nextLoc;                                                                  // 304\n          } else {                                                                                            // 305\n            state = GenStateSuspendedYield;                                                                   // 306\n            return info;                                                                                      // 307\n          }                                                                                                   // 308\n                                                                                                              // 309\n          context.delegate = null;                                                                            // 310\n        }                                                                                                     // 311\n                                                                                                              // 312\n        if (method === \"next\") {                                                                              // 313\n          // Setting context._sent for legacy support of Babel's                                              // 314\n          // function.sent implementation.                                                                    // 315\n          context.sent = context._sent = arg;                                                                 // 316\n                                                                                                              // 317\n        } else if (method === \"throw\") {                                                                      // 318\n          if (state === GenStateSuspendedStart) {                                                             // 319\n            state = GenStateCompleted;                                                                        // 320\n            throw arg;                                                                                        // 321\n          }                                                                                                   // 322\n                                                                                                              // 323\n          if (context.dispatchException(arg)) {                                                               // 324\n            // If the dispatched exception was caught by a catch block,                                       // 325\n            // then let that catch block handle the exception normally.                                       // 326\n            method = \"next\";                                                                                  // 327\n            arg = undefined;                                                                                  // 328\n          }                                                                                                   // 329\n                                                                                                              // 330\n        } else if (method === \"return\") {                                                                     // 331\n          context.abrupt(\"return\", arg);                                                                      // 332\n        }                                                                                                     // 333\n                                                                                                              // 334\n        state = GenStateExecuting;                                                                            // 335\n                                                                                                              // 336\n        var record = tryCatch(innerFn, self, context);                                                        // 337\n        if (record.type === \"normal\") {                                                                       // 338\n          // If an exception is thrown from innerFn, we leave state ===                                       // 339\n          // GenStateExecuting and loop back for another invocation.                                          // 340\n          state = context.done                                                                                // 341\n            ? GenStateCompleted                                                                               // 342\n            : GenStateSuspendedYield;                                                                         // 343\n                                                                                                              // 344\n          var info = {                                                                                        // 345\n            value: record.arg,                                                                                // 346\n            done: context.done                                                                                // 347\n          };                                                                                                  // 348\n                                                                                                              // 349\n          if (record.arg === ContinueSentinel) {                                                              // 350\n            if (context.delegate && method === \"next\") {                                                      // 351\n              // Deliberately forget the last sent value so that we don't                                     // 352\n              // accidentally pass it on to the delegate.                                                     // 353\n              arg = undefined;                                                                                // 354\n            }                                                                                                 // 355\n          } else {                                                                                            // 356\n            return info;                                                                                      // 357\n          }                                                                                                   // 358\n                                                                                                              // 359\n        } else if (record.type === \"throw\") {                                                                 // 360\n          state = GenStateCompleted;                                                                          // 361\n          // Dispatch the exception by looping back around to the                                             // 362\n          // context.dispatchException(arg) call above.                                                       // 363\n          method = \"throw\";                                                                                   // 364\n          arg = record.arg;                                                                                   // 365\n        }                                                                                                     // 366\n      }                                                                                                       // 367\n    };                                                                                                        // 368\n  }                                                                                                           // 369\n                                                                                                              // 370\n  // Define Generator.prototype.{next,throw,return} in terms of the                                           // 371\n  // unified ._invoke helper method.                                                                          // 372\n  defineIteratorMethods(Gp);                                                                                  // 373\n                                                                                                              // 374\n  Gp[iteratorSymbol] = function() {                                                                           // 375\n    return this;                                                                                              // 376\n  };                                                                                                          // 377\n                                                                                                              // 378\n  Gp[toStringTagSymbol] = \"Generator\";                                                                        // 379\n                                                                                                              // 380\n  Gp.toString = function() {                                                                                  // 381\n    return \"[object Generator]\";                                                                              // 382\n  };                                                                                                          // 383\n                                                                                                              // 384\n  function pushTryEntry(locs) {                                                                               // 385\n    var entry = { tryLoc: locs[0] };                                                                          // 386\n                                                                                                              // 387\n    if (1 in locs) {                                                                                          // 388\n      entry.catchLoc = locs[1];                                                                               // 389\n    }                                                                                                         // 390\n                                                                                                              // 391\n    if (2 in locs) {                                                                                          // 392\n      entry.finallyLoc = locs[2];                                                                             // 393\n      entry.afterLoc = locs[3];                                                                               // 394\n    }                                                                                                         // 395\n                                                                                                              // 396\n    this.tryEntries.push(entry);                                                                              // 397\n  }                                                                                                           // 398\n                                                                                                              // 399\n  function resetTryEntry(entry) {                                                                             // 400\n    var record = entry.completion || {};                                                                      // 401\n    record.type = \"normal\";                                                                                   // 402\n    delete record.arg;                                                                                        // 403\n    entry.completion = record;                                                                                // 404\n  }                                                                                                           // 405\n                                                                                                              // 406\n  function Context(tryLocsList) {                                                                             // 407\n    // The root entry object (effectively a try statement without a catch                                     // 408\n    // or a finally block) gives us a place to store values thrown from                                       // 409\n    // locations where there is no enclosing try statement.                                                   // 410\n    this.tryEntries = [{ tryLoc: \"root\" }];                                                                   // 411\n    tryLocsList.forEach(pushTryEntry, this);                                                                  // 412\n    this.reset(true);                                                                                         // 413\n  }                                                                                                           // 414\n                                                                                                              // 415\n  runtime.keys = function(object) {                                                                           // 416\n    var keys = [];                                                                                            // 417\n    for (var key in object) {                                                                                 // 418\n      keys.push(key);                                                                                         // 419\n    }                                                                                                         // 420\n    keys.reverse();                                                                                           // 421\n                                                                                                              // 422\n    // Rather than returning an object with a next method, we keep                                            // 423\n    // things simple and return the next function itself.                                                     // 424\n    return function next() {                                                                                  // 425\n      while (keys.length) {                                                                                   // 426\n        var key = keys.pop();                                                                                 // 427\n        if (key in object) {                                                                                  // 428\n          next.value = key;                                                                                   // 429\n          next.done = false;                                                                                  // 430\n          return next;                                                                                        // 431\n        }                                                                                                     // 432\n      }                                                                                                       // 433\n                                                                                                              // 434\n      // To avoid creating an additional object, we just hang the .value                                      // 435\n      // and .done properties off the next function object itself. This                                       // 436\n      // also ensures that the minifier will not anonymize the function.                                      // 437\n      next.done = true;                                                                                       // 438\n      return next;                                                                                            // 439\n    };                                                                                                        // 440\n  };                                                                                                          // 441\n                                                                                                              // 442\n  function values(iterable) {                                                                                 // 443\n    if (iterable) {                                                                                           // 444\n      var iteratorMethod = iterable[iteratorSymbol];                                                          // 445\n      if (iteratorMethod) {                                                                                   // 446\n        return iteratorMethod.call(iterable);                                                                 // 447\n      }                                                                                                       // 448\n                                                                                                              // 449\n      if (typeof iterable.next === \"function\") {                                                              // 450\n        return iterable;                                                                                      // 451\n      }                                                                                                       // 452\n                                                                                                              // 453\n      if (!isNaN(iterable.length)) {                                                                          // 454\n        var i = -1, next = function next() {                                                                  // 455\n          while (++i < iterable.length) {                                                                     // 456\n            if (hasOwn.call(iterable, i)) {                                                                   // 457\n              next.value = iterable[i];                                                                       // 458\n              next.done = false;                                                                              // 459\n              return next;                                                                                    // 460\n            }                                                                                                 // 461\n          }                                                                                                   // 462\n                                                                                                              // 463\n          next.value = undefined;                                                                             // 464\n          next.done = true;                                                                                   // 465\n                                                                                                              // 466\n          return next;                                                                                        // 467\n        };                                                                                                    // 468\n                                                                                                              // 469\n        return next.next = next;                                                                              // 470\n      }                                                                                                       // 471\n    }                                                                                                         // 472\n                                                                                                              // 473\n    // Return an iterator with no values.                                                                     // 474\n    return { next: doneResult };                                                                              // 475\n  }                                                                                                           // 476\n  runtime.values = values;                                                                                    // 477\n                                                                                                              // 478\n  function doneResult() {                                                                                     // 479\n    return { value: undefined, done: true };                                                                  // 480\n  }                                                                                                           // 481\n                                                                                                              // 482\n  Context.prototype = {                                                                                       // 483\n    constructor: Context,                                                                                     // 484\n                                                                                                              // 485\n    reset: function(skipTempReset) {                                                                          // 486\n      this.prev = 0;                                                                                          // 487\n      this.next = 0;                                                                                          // 488\n      // Resetting context._sent for legacy support of Babel's                                                // 489\n      // function.sent implementation.                                                                        // 490\n      this.sent = this._sent = undefined;                                                                     // 491\n      this.done = false;                                                                                      // 492\n      this.delegate = null;                                                                                   // 493\n                                                                                                              // 494\n      this.tryEntries.forEach(resetTryEntry);                                                                 // 495\n                                                                                                              // 496\n      if (!skipTempReset) {                                                                                   // 497\n        for (var name in this) {                                                                              // 498\n          // Not sure about the optimal order of these conditions:                                            // 499\n          if (name.charAt(0) === \"t\" &&                                                                       // 500\n              hasOwn.call(this, name) &&                                                                      // 501\n              !isNaN(+name.slice(1))) {                                                                       // 502\n            this[name] = undefined;                                                                           // 503\n          }                                                                                                   // 504\n        }                                                                                                     // 505\n      }                                                                                                       // 506\n    },                                                                                                        // 507\n                                                                                                              // 508\n    stop: function() {                                                                                        // 509\n      this.done = true;                                                                                       // 510\n                                                                                                              // 511\n      var rootEntry = this.tryEntries[0];                                                                     // 512\n      var rootRecord = rootEntry.completion;                                                                  // 513\n      if (rootRecord.type === \"throw\") {                                                                      // 514\n        throw rootRecord.arg;                                                                                 // 515\n      }                                                                                                       // 516\n                                                                                                              // 517\n      return this.rval;                                                                                       // 518\n    },                                                                                                        // 519\n                                                                                                              // 520\n    dispatchException: function(exception) {                                                                  // 521\n      if (this.done) {                                                                                        // 522\n        throw exception;                                                                                      // 523\n      }                                                                                                       // 524\n                                                                                                              // 525\n      var context = this;                                                                                     // 526\n      function handle(loc, caught) {                                                                          // 527\n        record.type = \"throw\";                                                                                // 528\n        record.arg = exception;                                                                               // 529\n        context.next = loc;                                                                                   // 530\n        return !!caught;                                                                                      // 531\n      }                                                                                                       // 532\n                                                                                                              // 533\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                 // 534\n        var entry = this.tryEntries[i];                                                                       // 535\n        var record = entry.completion;                                                                        // 536\n                                                                                                              // 537\n        if (entry.tryLoc === \"root\") {                                                                        // 538\n          // Exception thrown outside of any try block that could handle                                      // 539\n          // it, so set the completion value of the entire function to                                        // 540\n          // throw the exception.                                                                             // 541\n          return handle(\"end\");                                                                               // 542\n        }                                                                                                     // 543\n                                                                                                              // 544\n        if (entry.tryLoc <= this.prev) {                                                                      // 545\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");                                                      // 546\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");                                                  // 547\n                                                                                                              // 548\n          if (hasCatch && hasFinally) {                                                                       // 549\n            if (this.prev < entry.catchLoc) {                                                                 // 550\n              return handle(entry.catchLoc, true);                                                            // 551\n            } else if (this.prev < entry.finallyLoc) {                                                        // 552\n              return handle(entry.finallyLoc);                                                                // 553\n            }                                                                                                 // 554\n                                                                                                              // 555\n          } else if (hasCatch) {                                                                              // 556\n            if (this.prev < entry.catchLoc) {                                                                 // 557\n              return handle(entry.catchLoc, true);                                                            // 558\n            }                                                                                                 // 559\n                                                                                                              // 560\n          } else if (hasFinally) {                                                                            // 561\n            if (this.prev < entry.finallyLoc) {                                                               // 562\n              return handle(entry.finallyLoc);                                                                // 563\n            }                                                                                                 // 564\n                                                                                                              // 565\n          } else {                                                                                            // 566\n            throw new Error(\"try statement without catch or finally\");                                        // 567\n          }                                                                                                   // 568\n        }                                                                                                     // 569\n      }                                                                                                       // 570\n    },                                                                                                        // 571\n                                                                                                              // 572\n    abrupt: function(type, arg) {                                                                             // 573\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                 // 574\n        var entry = this.tryEntries[i];                                                                       // 575\n        if (entry.tryLoc <= this.prev &&                                                                      // 576\n            hasOwn.call(entry, \"finallyLoc\") &&                                                               // 577\n            this.prev < entry.finallyLoc) {                                                                   // 578\n          var finallyEntry = entry;                                                                           // 579\n          break;                                                                                              // 580\n        }                                                                                                     // 581\n      }                                                                                                       // 582\n                                                                                                              // 583\n      if (finallyEntry &&                                                                                     // 584\n          (type === \"break\" ||                                                                                // 585\n           type === \"continue\") &&                                                                            // 586\n          finallyEntry.tryLoc <= arg &&                                                                       // 587\n          arg <= finallyEntry.finallyLoc) {                                                                   // 588\n        // Ignore the finally entry if control is not jumping to a                                            // 589\n        // location outside the try/catch block.                                                              // 590\n        finallyEntry = null;                                                                                  // 591\n      }                                                                                                       // 592\n                                                                                                              // 593\n      var record = finallyEntry ? finallyEntry.completion : {};                                               // 594\n      record.type = type;                                                                                     // 595\n      record.arg = arg;                                                                                       // 596\n                                                                                                              // 597\n      if (finallyEntry) {                                                                                     // 598\n        this.next = finallyEntry.finallyLoc;                                                                  // 599\n      } else {                                                                                                // 600\n        this.complete(record);                                                                                // 601\n      }                                                                                                       // 602\n                                                                                                              // 603\n      return ContinueSentinel;                                                                                // 604\n    },                                                                                                        // 605\n                                                                                                              // 606\n    complete: function(record, afterLoc) {                                                                    // 607\n      if (record.type === \"throw\") {                                                                          // 608\n        throw record.arg;                                                                                     // 609\n      }                                                                                                       // 610\n                                                                                                              // 611\n      if (record.type === \"break\" ||                                                                          // 612\n          record.type === \"continue\") {                                                                       // 613\n        this.next = record.arg;                                                                               // 614\n      } else if (record.type === \"return\") {                                                                  // 615\n        this.rval = record.arg;                                                                               // 616\n        this.next = \"end\";                                                                                    // 617\n      } else if (record.type === \"normal\" && afterLoc) {                                                      // 618\n        this.next = afterLoc;                                                                                 // 619\n      }                                                                                                       // 620\n    },                                                                                                        // 621\n                                                                                                              // 622\n    finish: function(finallyLoc) {                                                                            // 623\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                 // 624\n        var entry = this.tryEntries[i];                                                                       // 625\n        if (entry.finallyLoc === finallyLoc) {                                                                // 626\n          this.complete(entry.completion, entry.afterLoc);                                                    // 627\n          resetTryEntry(entry);                                                                               // 628\n          return ContinueSentinel;                                                                            // 629\n        }                                                                                                     // 630\n      }                                                                                                       // 631\n    },                                                                                                        // 632\n                                                                                                              // 633\n    \"catch\": function(tryLoc) {                                                                               // 634\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                 // 635\n        var entry = this.tryEntries[i];                                                                       // 636\n        if (entry.tryLoc === tryLoc) {                                                                        // 637\n          var record = entry.completion;                                                                      // 638\n          if (record.type === \"throw\") {                                                                      // 639\n            var thrown = record.arg;                                                                          // 640\n            resetTryEntry(entry);                                                                             // 641\n          }                                                                                                   // 642\n          return thrown;                                                                                      // 643\n        }                                                                                                     // 644\n      }                                                                                                       // 645\n                                                                                                              // 646\n      // The context.catch method must only be called with a location                                         // 647\n      // argument that corresponds to a known catch block.                                                    // 648\n      throw new Error(\"illegal catch attempt\");                                                               // 649\n    },                                                                                                        // 650\n                                                                                                              // 651\n    delegateYield: function(iterable, resultName, nextLoc) {                                                  // 652\n      this.delegate = {                                                                                       // 653\n        iterator: values(iterable),                                                                           // 654\n        resultName: resultName,                                                                               // 655\n        nextLoc: nextLoc                                                                                      // 656\n      };                                                                                                      // 657\n                                                                                                              // 658\n      return ContinueSentinel;                                                                                // 659\n    }                                                                                                         // 660\n  };                                                                                                          // 661\n})(                                                                                                           // 662\n  // Among the various tricks for obtaining a reference to the global                                         // 663\n  // object, this seems to be the most reliable technique that does not                                       // 664\n  // use indirect eval (which violates Content Security Policy).                                              // 665\n  typeof global === \"object\" ? global :                                                                       // 666\n  typeof window === \"object\" ? window :                                                                       // 667\n  typeof self === \"object\" ? self : this                                                                      // 668\n);                                                                                                            // 669\n                                                                                                              // 670\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js"}]